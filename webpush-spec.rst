===========
WebPush仕様
===========

参考になる情報や仕様など。

仕様関連
========

* `WebPush <https://tools.ietf.org/html/rfc8030>`_
* `VAPID <https://tools.ietf.org/html/draft-ietf-webpush-vapid-04>`_
* `Encryption <https://tools.ietf.org/html/draft-ietf-webpush-encryption-09>`_

用語
----

ユーザエージェント
  通知を受け取るブラウザ

プッシュサービス
  ユーザエージェントへ実際に通知を行うサービス

  現状はGoogleまたはMozillaの2つだと思って良さそう

アプリケーションサーバ
  プッシュサービスへ通知を依頼するサーバ

鍵の取り扱い
============

アプリケーションサーバが生成
----------------------------

アプリケーションサーバは鍵ペアをVAPIDのために生成する。
プッシュサービスに鍵を登録する等の作業は不要のため、
必要に応じて鍵ペアを生成しても良いが、
トークン生成の時に渡した公開鍵とペアの秘密鍵を使って署名をする必要がある。

VAPID-秘密鍵
  1. VAPIDの署名に使う
  2. トークンの生成時に使った鍵とペアの秘密鍵で署名する

VAPID-公開鍵
  1. トークンURL生成のためにユーザエージェントへ渡す
  2. VAPID検証のためにプッシュサービスへ ``Crypto-Key: p256ecdsa=`` ヘッダで渡す

メッセージの暗号化を行う場合、
アプリケーションサーバは追加で別の鍵ペアを生成する。

暗号化-秘密鍵
  1. アプリケーションサーバとユーザエージェントの共通シークレット生成に使う

暗号化-公開鍵
  1. プッシュサービスへ ``Crypto-Key: dh=`` ヘッダで渡す

暗号化-乱数
  1. プッシュサービスへ ``Encryption: salt=`` ヘッダで渡す

ユーザエージェントが生成
------------------------

秘密鍵
  1. おそらくメッセージのデコードに使う

公開鍵
  1. アプリケーションサーバへ任意の方法で送る
  2. 暗号化で使う共通シークレット生成に使う

乱数
  1. アプリケーションサーバへ任意の方法で送る
  2. メッセージの暗号化処理で強度を上げる(hkdf)ために使う
  3. Authentication Secretと呼ぶ

参考情報
========

* `Web Pushでブラウザにプッシュ通知を送ってみる <https://qiita.com/tomoyukilabs/items/217915676603fda73b0a>`_

メモ
====

アプリケーションサーバの秘密鍵を更新する場合、
過去に生成したトークンはどうなるんだろう。
